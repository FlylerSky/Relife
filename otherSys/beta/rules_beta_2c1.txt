rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /posts/{postId} {
      allow read: if true;

      allow create: if
        request.resource.data.createdAt == request.time
        && request.resource.data.likes == 0
        && request.resource.data.dislikes == 0
        && request.resource.data.commentsCount == 0
        && (
          (request.auth != null && request.resource.data.userId == request.auth.uid)
          || (request.auth == null)
        );

      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;

      allow update: if (
        (
          request.auth != null
          && resource.data.userId == request.auth.uid
          && request.resource.data.createdAt == resource.data.createdAt
          && request.resource.data.userId == resource.data.userId
          && !request.resource.data.diff(resource.data).changedKeys().hasAny(['likes','dislikes','commentsCount'])
        )
        ||
        (
          request.auth != null
          && request.resource.data.diff(resource.data).changedKeys().hasOnly(['likes','dislikes','commentsCount'])
          && request.resource.data.likes is int
          && request.resource.data.dislikes is int
          && request.resource.data.commentsCount is int
          && (
            request.resource.data.likes == resource.data.likes
            || request.resource.data.likes == resource.data.likes + 1
            || request.resource.data.likes == resource.data.likes - 1
          )
          && (
            request.resource.data.dislikes == resource.data.dislikes
            || request.resource.data.dislikes == resource.data.dislikes + 1
            || request.resource.data.dislikes == resource.data.dislikes - 1
          )
          && (
            request.resource.data.commentsCount == resource.data.commentsCount
            || request.resource.data.commentsCount == resource.data.commentsCount + 1
            || request.resource.data.commentsCount == resource.data.commentsCount - 1
          )
        )
      );

      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null
                      && request.resource.data.userId == request.auth.uid
                      && request.resource.data.displayName is string
                      && request.resource.data.text is string
                      && request.resource.data.createdAt == request.time;
        allow update, delete: if false;
      }

      match /likes/{likeId} {
        allow read: if true;
        allow create: if request.auth != null && request.auth.uid == likeId
                      && request.resource.data.userId == request.auth.uid
                      && request.resource.data.type in ['like','dislike']
                      && request.resource.data.createdAt == request.time;
        allow update: if request.auth != null && request.auth.uid == likeId
                      && request.resource.data.userId == request.auth.uid
                      && request.resource.data.type in ['like','dislike'];
        allow delete: if request.auth != null && request.auth.uid == likeId;
      }
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId && request.resource.data.email == request.auth.token.email;

      // Owner full update
      allow update: if request.auth != null && request.auth.uid == userId
      // OR controlled counter adjustments (robust when counters may be missing)
      || (
        request.auth != null
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['followersCount','followingCount'])
        && (
           // followersCount allowed: unchanged OR +1 OR -1 OR resource missing -> new value 1
           (
             (resource.data.followersCount is int && (
                request.resource.data.followersCount == resource.data.followersCount
                || request.resource.data.followersCount == resource.data.followersCount + 1
                || request.resource.data.followersCount == resource.data.followersCount - 1
             ))
             ||
             (!resource.data.keys().hasAll(['followersCount']) && request.resource.data.followersCount == 1)
           )
        )
        && (
           // followingCount allowed: unchanged OR +1 OR -1 OR resource missing -> new value 1
           (
             (resource.data.followingCount is int && (
                request.resource.data.followingCount == resource.data.followingCount
                || request.resource.data.followingCount == resource.data.followingCount + 1
                || request.resource.data.followingCount == resource.data.followingCount - 1
             ))
             ||
             (!resource.data.keys().hasAll(['followingCount']) && request.resource.data.followingCount == 1)
           )
        )
      );

      allow delete: if request.auth != null && request.auth.uid == userId;

      match /followers/{followerId} {
        allow read: if true;
        allow create: if request.auth != null
                      && request.auth.uid == followerId
                      && request.resource.data.userId == request.auth.uid
                      && request.resource.data.createdAt == request.time;
        allow delete: if request.auth != null && request.auth.uid == followerId;
        allow update: if false;
      }

      match /following/{followingId} {
        allow read: if true;
        allow create: if request.auth != null
                      && request.auth.uid == userId
                      && request.resource.data.userId == followingId
                      && request.resource.data.createdAt == request.time;
        allow delete: if request.auth != null && request.auth.uid == userId;
        allow update: if false;
      }

      match /visitors/{visitorId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create, update: if request.auth != null
                               && request.auth.uid == visitorId
                               && request.resource.data.userId == request.auth.uid
                               && request.resource.data.lastVisitedAt == request.time;
        allow delete: if (request.auth != null && (request.auth.uid == userId || request.auth.uid == visitorId));
      }
    }

    match /searchStats/{doc} {
      allow read: if true;
      allow write: if true;
    }
  }
}
